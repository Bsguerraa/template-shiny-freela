library(shiny); runApp('app_2.R')
gi_tbl_prev <- aceitabilidade_tbl
head(gi_tbl_prev)
gi_tbl_prev <- aceitabilidade_tbl %>%
mutate(Horas = as.numeric(difftime(result_status_date_time, collection_date_time, units = "hours")),
month = as.Date(floor_date(RELEASE_DATE, unit = "month")))
head(gi_tbl_prev)
View(gi_tbl_prev)
gi_tbl_prev <- gestao_isolamento_tbl %>%
mutate(Horas = as.numeric(difftime(result_status_date_time, collection_date_time, units = "hours")),
month = as.Date(floor_date(RELEASE_DATE, unit = "month")))
head(gi_tbl_prev)
gi_tbl_prev %>%
mutate(release_saving = difftime(result_status_date_time, ADMISSION_DATE, units = "hours"))
5*24
gi_tbl_prev %>%
filter(ISOLATED == "Sim") %>%
mutate(release_saving = 5*24 - as.numeric(difftime(result_status_date_time, ADMISSION_DATE, units = "hours")))
68 %% 24
24 %% 24
23 %% 24
25 %% 24
25 %/% 24
24 %/% 24
23 %/% 24
0 %/% 24
2 %/% 24
47 %/% 24
48 %/% 24
gi_tbl_prev %>%
filter(ISOLATED == "Sim") %>%
mutate(occupation_hours = as.numeric(difftime(result_status_date_time, ADMISSION_DATE, units = "hours")),
occupation_days = (occupation_hours %/% 24) + 1,
saving_days_release = 5 - occupation_days,
saving_cost = saving_days_release * 100)
saving_giro_tbl %>%
filter(ISOLATED == "Sim") %>%
mutate(occupation_hours = as.numeric(difftime(result_status_date_time, ADMISSION_DATE, units = "hours")),
occupation_days = (occupation_hours %/% 24) + 1,
saving_days_release = mean_isolation_time - occupation_days,
saving_cost = saving_days_release * bed_cost_per_day)
#gi_tbl_prev() %>%
saving_giro_tbl <- gestao_isolamento_tbl
saving_giro_tbl
View(saving_giro_tbl)
#gi_tbl_prev() %>%
saving_giro_tbl <- gestao_isolamento_tbl %>%
filter(ISOLATED == "Sim") %>%
mutate(occupation_hours = as.numeric(difftime(result_status_date_time, ADMISSION_DATE, units = "hours")),
occupation_days = (occupation_hours %/% 24) + 1,
saving_days_release = mean_isolation_time - occupation_days,
saving_cost = saving_days_release * bed_cost_per_day)
###
# Custo diário por utilizacao de leito de isolamento (reais):
bed_cost_per_day = 100
# Tempo médio de isolamento do paciente antes do uso de DBMax (dias):
mean_isolation_time = 5
#gi_tbl_prev() %>%
saving_giro_tbl <- gestao_isolamento_tbl %>%
filter(ISOLATED == "Sim") %>%
mutate(occupation_hours = as.numeric(difftime(result_status_date_time, ADMISSION_DATE, units = "hours")),
occupation_days = (occupation_hours %/% 24) + 1,
saving_days_release = mean_isolation_time - occupation_days,
saving_cost = saving_days_release * bed_cost_per_day)
saving_giro_tbl
View(saving_giro_tbl)
gestao_isolamento_tbl %>%
mutate(date = as.Date(ADMISSION_DATE)) %>%
group_by(date) %>%
reframe(bed_n = n())
bed_availability_tbl <- gestao_isolamento_tbl %>%
mutate(date = as.Date(ADMISSION_DATE)) %>%
group_by(date) %>%
reframe(bed_n = n())
View(bed_availability_tbl)
gestao_isolamento_range <- as.Date(range(c(range(gestao_isolamento_tbl$ADMISSION_DATE),
range(gestao_isolamento_tbl$collection_date_time),
range(gestao_isolamento_tbl$result_status_date_time),
range(gestao_isolamento_tbl$RELEASE_DATE))))
gestao_isolamento_range
bed_availability_tbl <- gestao_isolamento_tbl %>%
mutate(date =seq(gestao_isolamento_range[1], gestao_isolamento_range[2], by= "days"))
bed_availability_tbl <- data.frame(
bed_date = seq(gestao_isolamento_range[1], gestao_isolamento_range[2], by= "days"),
bed_n = 50)
View(bed_availability_tbl)
bed_availability_tbl
fwrite(gestao_isolamento_range, file = "data/gestao_isolamento_range.csv")
fwrite(bed_availability_tbl, file = "data/bed_availability_tbl.csv")
bed_availability_tbl <- read.csv("data/bed_availability_tbl.csv")
View(bed_availability_tbl)
head(gestao_isolamento_tbl)
head(bed_availability_tbl)
gestao_isolamento_tbl %>%
left_join(bed_availability_tbl, by = c("RELEASE_DATE" = "bed_date"))
bed_availability_tbl <- data.frame(
bed_date = as.Date(seq(gestao_isolamento_range[1], gestao_isolamento_range[2], by= "days")),
bed_n = 50)
gestao_isolamento_tbl %>%
left_join(bed_availability_tbl, by = c("RELEASE_DATE" = "bed_date"))
gestao_isolamento_tbl %>%
mutate(RELEASE_DATE = as.Date(RELEASE_DATE)) %>%
left_join(bed_availability_tbl, by = c("RELEASE_DATE" = "bed_date"))
gestao_isolamento_tbl %>%
mutate(RELEASE_DATE = as.Date(RELEASE_DATE)) %>%
left_join(bed_availability_tbl, by = c("RELEASE_DATE" = "bed_date")) %>%
mutate(within_date_range = ifelse(RELEASE_DATE >= gestao_isolamento_range[1] &
RELEASE_DATE <= gestao_isolamento_range[2],
T, F))
gestao_isolamento_tbl %>%
filter(ISOLATED == "Sim") %>%
mutate(RELEASE_DATE = as.Date(RELEASE_DATE)) %>%
filter(RELEASE_DATE >= gestao_isolamento_range[1] &
RELEASE_DATE <= gestao_isolamento_range[2]) %>%
left_join(bed_availability_tbl, by = c("RELEASE_DATE" = "bed_date")) %>%
reframe(n()/mean(bed_n, na.rm = T))
View(gestao_isolamento_tbl)
gestao_isolamento_tbl <- gestao_isolamento_tbl_csv %>%
mutate(
ADMISSION_DATE = as.POSIXct(ADMISSION_DATE, format = "%Y-%m-%dT%H:%M:%SZ", tz = "UTC"),
collection_date_time = as.POSIXct(collection_date_time, format = "%Y-%m-%dT%H:%M:%SZ", tz = "UTC"),
result_status_date_time = as.POSIXct(result_status_date_time, format = "%Y-%m-%dT%H:%M:%SZ", tz = "UTC"),
RELEASE_DATE = as.POSIXct(RELEASE_DATE, format = "%Y-%m-%dT%H:%M:%SZ", tz = "UTC"),
dif = as.numeric(difftime(result_status_date_time, collection_date_time, units = "hours")),
bed_occupation_days = as.numeric(difftime(RELEASE_DATE, ADMISSION_DATE, units = "days")),
month = as.Date(floor_date(collection_date_time, unit = "month"))) %>%
left_join(setores_hospitalares,  by = "UNIT_ID")
gestao_isolamento_setores_list <- c("Todos", sort(unique(gestao_isolamento_tbl$DESCRIPTION)))
gestao_isolamento_range <- as.Date(range(c(range(gestao_isolamento_tbl$ADMISSION_DATE),
range(gestao_isolamento_tbl$collection_date_time),
range(gestao_isolamento_tbl$result_status_date_time),
range(gestao_isolamento_tbl$RELEASE_DATE))))
gestao_isolamento_tbl_csv
View(gestao_isolamento_tbl)
head(gestao_isolamento_tbl)
View(gestao_isolamento_tbl)
gestao_isolamento_tbl %>%
# Considera somente pacientes que internaram dentro do período selecionado
filter(RELEASE_DATE >= gestao_isolamento_range[1]) %>%
# Considera somente pacientes que receberam alta até o período selecionado
filter(RELEASE_DATE <= gestao_isolamento_range[2]) %>%
# Considera somente pacientes que estavam isolados, e foram liberados
filter(ISOLATED == "Sim") %>%
reframe(tm_ocupacao_leito = sum(bed_occupation_days, na.rm = T)/n())
runApp('app_2.R')
runApp('app_2.R')
bed_availability_tbl <- read_csv("data/bed_availability_tbl.csv")
runApp('app_2.R')
gi_tbl_prev() %>%
gestao_isolamento_tbl %>%
filter(ISOLATED == "Sim") %>%
mutate(occupation_hours = as.numeric(difftime(result_status_date_time, ADMISSION_DATE, units = "hours")),
occupation_days = (occupation_hours %/% 24) + 1,
saving_days_release = mean_isolation_time - occupation_days,
saving_cost = saving_days_release * bed_cost_per_day)
gestao_isolamento_tbl
gestao_isolamento_tbl %>%
filter(ISOLATED == "Sim") %>%
mutate(occupation_hours = as.numeric(difftime(result_status_date_time, ADMISSION_DATE, units = "hours")),
occupation_days = (occupation_hours %/% 24) + 1,
saving_days_release = mean_isolation_time - occupation_days,
saving_cost = saving_days_release * bed_cost_per_day)
gi_tbl_prev() %>%
asd = gestao_isolamento_tbl %>%
filter(ISOLATED == "Sim") %>%
mutate(occupation_hours = as.numeric(difftime(result_status_date_time, ADMISSION_DATE, units = "hours")),
occupation_days = (occupation_hours %/% 24) + 1,
saving_days_release = mean_isolation_time - occupation_days,
saving_cost = saving_days_release * bed_cost_per_day)
asd = gestao_isolamento_tbl %>%
filter(ISOLATED == "Sim") %>%
mutate(occupation_hours = as.numeric(difftime(result_status_date_time, ADMISSION_DATE, units = "hours")),
occupation_days = (occupation_hours %/% 24) + 1,
saving_days_release = mean_isolation_time - occupation_days,
saving_cost = saving_days_release * bed_cost_per_day)
sum(asd$saving_cost, na.rm = TRUE)
sum(asd$saving_cost, na.rm = TRUE)
runApp('app_2.R')
runApp('app_2.R')
